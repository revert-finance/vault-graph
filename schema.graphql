type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Borrow @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  owner: Bytes! # address
  assets: BigInt! # uint256
  shares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Deposit @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  owner: Bytes! # address
  assets: BigInt! # uint256
  shares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExchangeRateUpdate @entity(immutable: true) {
  id: Bytes!
  debtExchangeRateX96: BigInt! # uint256
  lendExchangeRateX96: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Liquidate @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  liquidator: Bytes! # address
  owner: Bytes! # address
  value: BigInt! # uint256
  cost: BigInt! # uint256
  amount0: BigInt! # uint256
  amount1: BigInt! # uint256
  reserve: BigInt! # uint256
  missing: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Repay @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  repayer: Bytes! # address
  owner: Bytes! # address
  assets: BigInt! # uint256
  shares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetLimits @entity(immutable: true) {
  id: Bytes!
  globalLendLimit: BigInt! # uint256
  globalDebtLimit: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetReserveFactor @entity(immutable: true) {
  id: Bytes!
  reserveFactorX32: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetReserveProtectionFactor @entity(immutable: true) {
  id: Bytes!
  reserveProtectionFactorX32: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetTokenConfig @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  collateralFactorX32: BigInt! # uint32
  collateralValueLimit: BigInt! # uint216
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetTransformer @entity(immutable: true) {
  id: Bytes!
  transformer: Bytes! # address
  active: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdraw @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  receiver: Bytes! # address
  owner: Bytes! # address
  assets: BigInt! # uint256
  shares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WithdrawCollateral @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  owner: Bytes! # address
  recipient: Bytes! # address
  liquidity: BigInt! # uint128
  amount0: BigInt! # uint256
  amount1: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WithdrawReserves @entity(immutable: true) {
  id: Bytes!
  amount: BigInt! # uint256
  receiver: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
